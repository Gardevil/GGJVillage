using UnityEngine;
using System.Collections;

public abstract class ExploitResurceAction : BaseAction
{
    protected int tripsLeft;
    protected float speed = 3;///m/s
    protected float exploitTimeMax = 5;///segundos
    protected float exploitTimeActual;
    protected bool goingToExploit;///controla si está yendo al recurso o trayéndolo al tótem
    protected Resource resource; ///recurso a explotar

    public override void Initialize()
    {
        targetPosition = FindManager.getWarehousePosition();
        tripsLeft = repetitions;
        exploitTimeActual = exploitTimeMax;
        goingToExploit = true;
        resource = GetClosestResource();
        if (resource == null)
        {
            Finish();
        }
        else
        {
            resource.inUse = true;
        }
    }

    protected abstract Resource GetClosestResource();

    public override void Update()
    {
        if (goingToExploit)
        {
            /// si no ha llegado a la posición del árbol, va
            if (villager.transform.position != resource.transform.position)
            {
                float stepSpeed = speed * Time.deltaTime;
                villager.transform.position = Vector3.MoveTowards(villager.transform.position, resource.transform.position, stepSpeed);
            }
            else
            {
                exploitTimeActual -= Time.deltaTime;
                if (exploitTimeActual <= 0)
                {
                    exploitTimeActual = exploitTimeMax;
                    goingToExploit = false;
                }
            }
        }
        else
        {/// se mueve al totem
            if (villager.transform.position != targetPosition)
            {
                float stepSpeed = speed * Time.deltaTime;
                villager.transform.position = Vector3.MoveTowards(villager.transform.position, targetPosition, stepSpeed);
            }
            else
            {
                tripsLeft--;
                if (tripsLeft > 0)
                {
                    goingToExploit = true;
                }
            }
        }
    }

    protected override void Finishing()
    {
        /// se pone como la vuelta de cortar el arbol del último viaje
        tripsLeft = 1;
        goingToExploit = false; 
        if (resource != null)
        {
            resource.inUse = false;
        }
    }

    public override bool IsFinished()
    {
        return tripsLeft == 0;
    }
}
